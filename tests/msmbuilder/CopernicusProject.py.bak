# This file is part of MSMBuilder.
#
# Copyright 2011 Stanford University
#
# MSMBuilder is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""A project for use with the Copernicus MD sampling engine.
"""
import os
import numpy as np

from msmbuilder import Conformation, Project, Trajectory
from msmbuilder.ssaCalculator import ssaCalculator

class CopernicusProject(Project.Project):
    def GetTrajFilename(self,TrajNumber):
        """Returns the filename of the Nth trajectory."""

        if TrajNumber >= self["NumTrajs"]:
            print "ERROR: no traj number %d" % TrajNumber
            return

        i = 0
        while i+1 < self["NumTrajs"] and TrajNumber >= self["PartsLenList"][i+1]:
            i += 1
        PartNum = TrajNumber - self["PartsLenList"][i]

        return(self["FileList"][i][PartNum])

    def AssignProject(self,Generators,AtomIndices=None,WhichTrajs=None):
        ass, rmsd, w = Project.Project.AssignProject(self, Generators, AtomIndices=AtomIndices, WhichTrajs=WhichTrajs)
        return ass

    def ClusterProject(self,AtomIndices=None,XTCOut=None,NumGen=None, Stride=None):

        TotNumConfs = self["TrajLengths"].sum()
        if Stride == None:
            Stride = 10

        if NumGen == None:
            NumGen = TotNumConfs / Stride / 10

        Gens = Project.Project.ClusterProject(self,NumGen,AtomIndices=AtomIndices,GetRandomConformations=False,NumConfsToGet=None,Which=None,Stride=Stride,KMedoidIterations=0,SkipKCenters=False,Debug=False,LoadDataFromFile=False,TemporaryTrajectoryFilename="./Data/DataToCluster.lh5",DiscardFirstN=0,DiscardLastN=0,RealKMedoidIterations=0)
        
        return Gens

    def EvenSampling(self, NumGens):
        print "doing even sampling"

        startStates = {}
        i = 0
        while i < NumGens:
            startStates[i] = 1
            i +=1

        return startStates

    def AdaptiveSampling(C, NumSims):
        mat = np.matrix(C, dtype="float64")
        nStates = mat.shape[0]

        calc = ssaCalculator( 1, mat, 1.0/nStates, evalList=[1], nNewSamples=NumSims)
        calc.displayContributions( bling=True )

        # write output
        startStateList = {}
        nOut = 0
        for i in range(len(calc.varianceContributions[0][:,9] )):
            if calc.varianceContributions[0][i,9] > 0:
                startStateList[i] = round(calc.varianceContributions[0][i,9])
                nOut += startStateList[i]

        # make sure get desired number of sims
        if nOut < NumSims:
            nHave = nOut
            nOut = 0
            for i in startStateList.keys():
                startStateList[i] = round(float(NumSims)/nHave*startStateList[i])
                nOut += startStateList[i]
            i = 0
            while nOut < NumSims:
                startStateList[startStateList.keys()[i]] += 1
                nOut += 1
                i += 1
                if i >= len(startStateList):
                    i = 0

        return startStateList

def CreateCopernicusProject(ConfFilename, FileList):
    # setup reference conformation
    if ConfFilename == None:
        print "No reference conf! ERROR"
        return
    Conf=Conformation.Conformation.LoadFromPDB(ConfFilename)

    NumTraj = 0
    PartsLenList = []
    for TrajPartList in FileList:
        PartsLenList.append(NumTraj)
        n = len(TrajPartList)
        NumTraj += n
    PartsLenList = np.array(PartsLenList, "int32")

    if NumTraj==0:
        print("No data found!  ERROR")
        return


    P1 = CopernicusProject()
    P1["FileList"] = FileList
    P1["NumTrajs"]=NumTraj
    P1["PartsLenList"] = PartsLenList
    P1["TrajFilePath"]=None
    P1["TrajFileBaseName"]=None
    P1["TrajFileType"]=None
    P1["ConfFilename"]=ConfFilename

    try:
        os.mkdir("./Data")
    except OSError:
        pass

    LenList=[]
    for i in range(NumTraj):
        f=P1.GetTrajFilename(i)
        print f
        LenList.append(Trajectory.Trajectory.LoadTrajectoryFile(f,Conf=Conf,JustInspect=True)[0])

    P1["TrajLengths"]=np.array(LenList)

    return P1

